// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DeveloperAccount {
  id            String          @id @default(cuid())
  email         String          @unique
  walletAddress String?         @unique
  Otps          AccountOtp[]
  Sessions      Session[]
  vaultKey      String?
  ApiTokens     ApiToken[]
  Erc20Tokens   Erc20Token[]
  SmartContract SmartContract[]
  Apps          App[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model App {
  id               String           @id @default(cuid())
  slug             String           @unique
  name             String           @unique
  description      String?
  imageUrl         String?
  SmartContracts   SmartContract[]
  ApiTokens        ApiToken[]
  DeveloperAccount DeveloperAccount @relation(fields: [developerId], references: [id])
  developerId      String
  Users            AppUser[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model DevelopersUserAccount {
  id                        String                     @id @default(cuid())
  email                     String                     @unique
  walletAddress             String?                    @unique
  Apps                      AppUser[]
  Otps                      AccountOtp[]
  Sessions                  Session[]
  sessionId                 String?
  SmartContractInteractions SmartContractInteraction[]
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
}

model AppUser {
  app       App                   @relation(fields: [appId], references: [id])
  appId     String
  user      DevelopersUserAccount @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime              @default(now())

  @@id([appId, userId])
  @@unique([appId, userId])
}

model AccountOtp {
  id                    String                 @id @default(cuid())
  otp                   String
  DeveloperAccount      DeveloperAccount?      @relation(fields: [developerId], references: [id])
  developerId           String?
  DevelopersUserAccount DevelopersUserAccount? @relation(fields: [developerUserId], references: [id])
  developerUserId       String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

enum sessionType {
  dev
  user
}

model Session {
  id                    String                 @id @default(cuid())
  accessToken           String                 @unique
  refreshToken          String                 @unique
  DeveloperAccount      DeveloperAccount?      @relation(fields: [developerId], references: [id])
  developerId           String?
  DevelopersUserAccount DevelopersUserAccount? @relation(fields: [developerUserId], references: [id])
  developerUserId       String?
  sessionType           sessionType            @default(dev)
  expiresAt             DateTime
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiToken {
  id               String            @id @default(cuid())
  vaultKey         String
  DeveloperAccount DeveloperAccount? @relation(fields: [developerId], references: [id])
  developerId      String?
  App              App               @relation(fields: [appId], references: [id])
  appId            String
  revoked          Boolean           @default(false)
  expiresAt        DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Erc20Token {
  id               String           @id @default(cuid())
  DeveloperAccount DeveloperAccount @relation(fields: [developerId], references: [id])
  developerId      String
  name             String
  symbol           String
  decimals         Int
  supply           Int
  contractAddress  String
  SmartContract    SmartContract    @relation(fields: [smartContractId], references: [id])
  smartContractId  String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model SmartContract {
  id                        String                     @id @default(cuid())
  address                   String                     @unique
  name                      String
  version                   Int
  DevelopersAccount         DeveloperAccount?          @relation(fields: [developerId], references: [id])
  developerId               String?
  metadataUrl               String
  metadataPayload           Json
  App                       App                        @relation(fields: [appId], references: [id])
  appId                     String
  Erc20Token                Erc20Token[]
  SmartContractInteractions SmartContractInteraction[]
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
}

model SmartContractInteraction {
  id                    String                       @id @default(cuid())
  DevelopersUserAccount DevelopersUserAccount        @relation(fields: [developerUserId], references: [id])
  developerUserId       String
  SmartContract         SmartContract                @relation(fields: [smartContractId], references: [id])
  smartContractId       String
  method                String
  txHash                String
  output                Json?
  input                 Json?
  fees                  String?
  type                  SmartContractInteractionType
  createdAt             DateTime                     @default(now())
  updatedAt             DateTime                     @updatedAt
}

enum SmartContractInteractionType {
  gasless
  operator
  wallet
}
