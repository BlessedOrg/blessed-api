// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DeveloperAccount {
  id              String                  @id @default(cuid())
  email           String                  @unique
  walletAddress   String?                 @unique
  Otps            AccountOtp[]
  Sessions        Session[]
  accountDeployed Boolean                 @default(false)
  vaultKey        String?
  Users           DevelopersUserAccount[]
  ApiTokens       ApiToken[]
  Erc20Tokens     Erc20Token[]
  SmartContract   SmartContract[]
  Applications    DeveloperApplication[]
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
}

model DevelopersUserAccount {
  id                        String                     @id @default(cuid())
  email                     String                     @unique
  walletAddress             String?                    @unique
  Otps                      AccountOtp[]
  Sessions                  Session[]
  sessionId                 String?
  DeveloperAccount          DeveloperAccount           @relation(fields: [developerId], references: [id])
  developerId               String
  accountDeployed           Boolean                    @default(false)
  vaultKey                  String?
  SmartContractInteractions SmartContractInteraction[]
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
}

model AccountOtp {
  id                    String                 @id @default(cuid())
  otp                   String
  DeveloperAccount      DeveloperAccount?      @relation(fields: [developerId], references: [id])
  developerId           String?
  DevelopersUserAccount DevelopersUserAccount? @relation(fields: [developerUserId], references: [id])
  developerUserId       String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

enum sessionType {
  dev
  user
}

model Session {
  id                    String                 @id @default(cuid())
  accessToken           String                 @unique
  refreshToken          String                 @unique
  DeveloperAccount      DeveloperAccount?      @relation(fields: [developerId], references: [id])
  developerId           String?
  DevelopersUserAccount DevelopersUserAccount? @relation(fields: [developerUserId], references: [id])
  developerUserId       String?
  sessionType           sessionType            @default(dev)
  expiresAt             DateTime
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiToken {
  id                     String                @id @default(cuid())
  vaultKey               String
  DeveloperAccount       DeveloperAccount?     @relation(fields: [developerId], references: [id])
  developerId            String?
  DeveloperApplication   DeveloperApplication? @relation(fields: [developerApplicationId], references: [id])
  developerApplicationId String?
  revoked                Boolean               @default(false)
  expiresAt              DateTime?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
}

model Erc20Token {
  id               String           @id @default(cuid())
  DeveloperAccount DeveloperAccount @relation(fields: [developerId], references: [id])
  developerId      String
  name             String
  symbol           String
  decimals         Int
  supply           Int
  contractAddress  String
  SmartContract    SmartContract    @relation(fields: [smartContractId], references: [id])
  smartContractId  String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model SmartContract {
  id                        String                     @id @default(cuid())
  address                   String                     @unique
  name                      String
  version                   Int
  DevelopersAccount         DeveloperAccount?          @relation(fields: [developerId], references: [id])
  developerId               String?
  metadataUrl               String
  metadataPayload           Json
  DeveloperApplication      DeveloperApplication?      @relation(fields: [developerApplicationId], references: [id])
  developerApplicationId    String?
  Erc20Token                Erc20Token[]
  SmartContractInteractions SmartContractInteraction[]
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
}

model SmartContractInteraction {
  id                     String                       @id @default(cuid())
  DevelopersUserAccount  DevelopersUserAccount        @relation(fields: [developerUserId], references: [id])
  developerUserId        String
  SmartContract          SmartContract                @relation(fields: [smartContractId], references: [id])
  smartContractId        String
  DeveloperApplication   DeveloperApplication?        @relation(fields: [developerApplicationId], references: [id])
  developerApplicationId String?
  method                 String
  txHash                 String
  output                 Json?
  input                  Json?
  fees                   String?
  type                   SmartContractInteractionType
  createdAt              DateTime                     @default(now())
  updatedAt              DateTime                     @updatedAt
}

enum SmartContractInteractionType {
  gasless
  operator
  wallet
}

model DeveloperApplication {
  id                        String                     @id @default(cuid())
  name                      String
  description               String?
  image                     String?
  SmartContracts            SmartContract[]
  SmartContractInteractions SmartContractInteraction[]
  ApiTokens                 ApiToken[]
  DeveloperAccount          DeveloperAccount           @relation(fields: [developerId], references: [id])
  developerId               String
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
}
