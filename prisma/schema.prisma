// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DeveloperAccount {
  id              String                  @id @default(cuid())
  email           String                  @unique
  walletAddress   String?                 @unique
  Otps            AccountOtp[]
  session         Session?
  accountDeployed Boolean                 @default(false)
  vaultKey        String?
  Users           DevelopersUserAccount[]
  ApiTokens       ApiToken[]
  Erc20Tokens     Erc20Token[]
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
}

model DevelopersUserAccount {
  id               String           @id @default(cuid())
  email            String           @unique
  walletAddress    String?          @unique
  Otps             AccountOtp[]
  session          Session?
  DeveloperAccount DeveloperAccount @relation(fields: [developerId], references: [id])
  developerId      String
  accountDeployed  Boolean          @default(false)
  vaultKey         String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  sessionId        String?
}

model AccountOtp {
  id                    String                 @id @default(cuid())
  otp                   String
  DeveloperAccount      DeveloperAccount?      @relation(fields: [developerId], references: [id])
  developerId           String?
  DevelopersUserAccount DevelopersUserAccount? @relation(fields: [developerUserId], references: [id])
  developerUserId       String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model Session {
  id                    String                 @id @default(cuid())
  accessToken           String                 @unique
  refreshToken          String                 @unique
  DeveloperAccount      DeveloperAccount?      @relation(fields: [developerId], references: [id])
  developerId           String?                @unique
  DevelopersUserAccount DevelopersUserAccount? @relation(fields: [developerUserId], references: [id])
  developerUserId       String?                @unique
  expiresAt             DateTime
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiToken {
  id               String            @id @default(cuid())
  vaultKey         String
  DeveloperAccount DeveloperAccount? @relation(fields: [developerId], references: [id])
  developerId      String?
  expiresAt        DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Erc20Token {
  id               String           @id @default(cuid())
  DeveloperAccount DeveloperAccount @relation(fields: [developerId], references: [id])
  developerId      String
  name             String
  symbol           String
  decimals         Int
  supply           Int
  contractAddress  String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}
