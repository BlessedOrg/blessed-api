// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DeveloperAccount {
  id                   String             @id @default(cuid())
  email                String             @unique
  walletAddress        String?            @unique
  smartWalletAddress   String?            @unique
  accessTokenVaultKey  String?
  capsuleTokenVaultKey String?
  SmartContract        SmartContract[]
  Apps                 App[]
  Sessions             DeveloperSession[]
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model App {
  id               String           @id @default(cuid())
  slug             String           @unique
  name             String           @unique
  description      String?
  imageUrl         String?
  domainUrl        String?
  SmartContracts   SmartContract[]
  DeveloperAccount DeveloperAccount @relation(fields: [developerId], references: [id])
  developerId      String
  Users            AppUser[]
  ApiTokens        ApiToken[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model User {
  id                        String                     @id @default(cuid())
  email                     String                     @unique
  walletAddress             String?                    @unique
  smartWalletAddress        String?                    @unique
  capsuleTokenVaultKey      String?
  Apps                      AppUser[]
  Sessions                  UserSession[]
  SmartContractInteractions SmartContractInteraction[]
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
}

model AppUser {
  app       App      @relation(fields: [appId], references: [id])
  appId     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@id([appId, userId])
  @@unique([appId, userId])
}

model ApiToken {
  id               String    @id @default(cuid())
  apiTokenVaultKey String
  App              App       @relation(fields: [appId], references: [id])
  appId            String
  revoked          Boolean   @default(false)
  expiresAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model UserSession {
  id           String   @id @default(cuid())
  accessToken  String   @unique
  refreshToken String   @unique
  appId        String
  User         User?    @relation(fields: [userId], references: [id])
  userId       String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model DeveloperSession {
  id               String            @id @default(cuid())
  DeveloperAccount DeveloperAccount? @relation(fields: [developerId], references: [id])
  developerId      String?
  expiresAt        DateTime
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SmartContract {
  id                        String                     @id @default(cuid())
  address                   String                     @unique
  name                      String
  version                   Int
  DevelopersAccount         DeveloperAccount?          @relation(fields: [developerId], references: [id])
  developerId               String?
  metadataUrl               String?
  metadataPayload           Json
  App                       App                        @relation(fields: [appId], references: [id])
  appId                     String
  SmartContractInteractions SmartContractInteraction[]
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
}

model SmartContractInteraction {
  id              String                       @id @default(cuid())
  User            User                         @relation(fields: [userId], references: [id])
  userId          String
  SmartContract   SmartContract                @relation(fields: [smartContractId], references: [id])
  smartContractId String
  method          String
  txHash          String
  output          Json?
  input           Json?
  fees            String?
  type            SmartContractInteractionType
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt
}

enum SmartContractInteractionType {
  gasless
  operator
  wallet
}
